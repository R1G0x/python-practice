Python Database API

How to connect to Python database?
  - Python Database API (DB-API) is a standard interface to
    interact with various databases.
  - DB-API supports connecting to different database servers such
    as Microsoft SQL Server 2000, PostgreSQL, Oracle.
  - Different DB API's are used for accessing different databases.
    Hence a programmer has to install DB API corresponding to the
    database one is working with.

Working with a Database

Working with a database includes the following steps:
  - Importing the corresponding DB-API module.
  - Acquiring a connection with the database.
  - Executing SQL statements and stored procedures.
  - Closing the connection

Creating Tables

You have connected to the database. Now, how do you create your
tables in the database?

  - In this topic, you will learn using sqlite3, DB API for SQLite
    database.
  - sqlite3 is available by default in Python standard library and 
    hence there is no need of installing it separately.
  - SQLite is a very lightweight database. You can connect to it
    directly, with minimal settings.
    
  
Inserting Database

Have you created your table? Now, let us learn how to insert data into
the table.

  - Data stored in Python variables can be inserted into database
    tables.
  - Data is passed to SQL statements through parameter
    substitution.
  - Single rows are inserted using execute and multiple rows using
    executeMany method of created cursor object.
    

Fetching Data

After executing the SQL statement for reading records from a table,
either of the following methods can be used to retrieve them in
Python.

 1. fetchone : It retrieves one record at a time in the form of a 
    tuple.
 2. fetchall : It retrieves all fetched records at a point in the form
    of tuple of tuples.


Object Relational Mappers
  - An object-relational mapper (ORM) is a library that
    automates the transfer of data stored in relational database
    tables into objects that are adopted in application code.
    
  - ORMs offer a high-level abstraction upon a relational database,
    which permits a developer to write Python code rather than
    SQL to create, read, update and delete data and schemas in
    their database.

Sample ORM Query
  - Consider the sample SQL statement used to retrieve 
    employees whose income is 10,000.00
    
      SELECT * FROM EMPLOYEE WHERE INCOME=10000.00
  
  - The equivalent Django ORM query is
      
      emps = Employee.objects.filter(income=10000.00)
  
  - The above code is written in Python and easy to read.
  - Such an ability to write Python code instead of SQL speeds
    up web application development.
  
  
  Illustrating ORM Usage in Web Frameworks
   -----------------------------------------------------------------------------|
  |web framework  | None             Flask           Flask           Django     |
  |---------------| ------------------------------------------------------------|
  |ORM            | SQLAlchemy       SQLAlchemy      SQLAlchemy      Django ORM |    
  |---------------| ------------------------------------------------------------|
  |database       | (built into                                                 |
  |connector      | Python stdlib)   MySQL-python    psycopg         psycopg    |
  |---------------| ------------------------------------------------------------|
  |relational     | SQLite           MySQL           PostgreSQL      PostgreSQL |
  |database       |                                                             |
   ---------------|-------------------------------------------------------------|